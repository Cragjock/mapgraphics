
#include "sdc.h"


extern Adafruit_RA8875 tft;

/***************/
void drawBorder(Box mybox, uint16_t border)
{

  tft.fillRect(mybox.x-border, mybox.y-border, mybox.w+border*2, mybox.h+border*2, RA8875_WHITE);
  tft.fillRect(mybox.x, mybox.y, mybox.w+border, mybox.h+border, RA8875_DARK_GREY);
  tft.fillTriangle( mybox.x-border, mybox.y+mybox.h+border, 
                    mybox.x, mybox.y + mybox.h,
                    mybox.x, mybox.y+mybox.h+border,
                    RA8875_DARK_GREY);

  tft.fillTriangle( mybox.x + mybox.w, mybox.y, 
                    mybox.x + mybox.w + border, mybox.y - border,
                    mybox.x + mybox.w + border, mybox.y,
                    RA8875_DARK_GREY);

  tft.drawLine(mybox.x+mybox.w, mybox.y+mybox.h, mybox.x+mybox.w + border, mybox.y+mybox.h+border, RA8875_BLACK);

}
/*****************/

bool setvisiblecursor(enum RA8875tcursor c, bool blink)
{
  uint8_t cW = 0;
  uint8_t cH = 0;
  uint8_t temp_val = tft.readReg(RA8875_MWCR0);
  c == NOCURSOR ? temp_val &= ~(1 << 6) : temp_val |= (1 << 6); // turn cursor and blink off
  
  if(!blink)
  {
      temp_val &= ~(0x20);
      tft.writeReg(RA8875_MWCR0, temp_val);
  }
  
  else
  {
      temp_val|= 0x20;
      tft.writeReg(RA8875_MWCR0, temp_val); 
      switch (c) 
      {
        case IBEAM:
            cW = 0x01;
            cH = 0x1F;
            break;
        case UNDER:
            cW = 0x07;
            cH = 0x00;    // default is 0 in spec pg 29
            break;
        case BLOCK:
            cW = 0x07;
            cH = 0x1F;
            break;
        case NOCURSOR:
        default:
            break;
    }
  }
  tft.writeReg(RA8875_CURHS, cW);
  tft.writeReg(RA8875_CURVS, cH);
 return blink; 
}

/***************
 * 
 *  Blink rate (sec)  = BTCR reg value * (1/frame rate) fr = 60hz, pg 89
 *  for .5 seconds, rate = 0x1E (30)
 *  for 1 sec, rate = 0x3c (60)
 * 
 */

void setCursorBlinkRate(uint8_t rate)
{
  if(rate > 60)
    rate = 30;

  tft.writeReg(RA8875_BTCR,rate); 
  
}





const uint8_t g1_cursor[] PROGMEM = {
0xFF,  0xFA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xEA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xEA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xEA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xEA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xEA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xEA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAA,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAB,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAB,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAB,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAB,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0xAB,
0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAF, 0xFF
};

  //uint8_t bmSatLeft[]={0,20,21,21,31,21,20,20};
  //uint8_t bmSatright[]= {0,5,21,21,31,21,5,5};
  //const uint8_t bmSatLeft[]={0,20,21,21,31,21,20,20,0,5,21,21,31,21,5,5};
  //const uint8_t bmSatright[]= {0,5,21,21,31,21,5,5,0,20,21,21,31,21,20,20};

    // my ISS looking icon for test mode 
  const uint8_t bmSatLeft[]PROGMEM ={0x80, 0x80, 0x90, 0x91, 0x91, 0x91, 0x93, 0xFF, 0x93, 0x91, 0x91, 0x91, 0x90, 0x80, 0x80, 0x00 };
  const uint8_t bmSatright[]PROGMEM = {0x02, 0x02, 0x12, 0x12, 0x12, 0x12, 0x92, 0xFE, 0x92, 0x12, 0x12, 0x12, 0x12, 0x02, 0x02, 0x00 };





